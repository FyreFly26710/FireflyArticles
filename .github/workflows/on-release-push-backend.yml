name: On Release Push Backend Image

on:
  push:
    branches: 
      - main
      - master
  workflow_dispatch:
# Commit message format to trigger the workflow:
# 
# Release Frontend Version X.Y.Z - Only builds and pushes the frontend
# Release Backend Version X.Y.Z - Only builds and pushes the backend
# Release App Version X.Y.Z - Builds and pushes both frontend and backend 
# 
jobs:
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      build_frontend: ${{ steps.check.outputs.build_frontend }}
      build_backend: ${{ steps.check.outputs.build_backend }}
      build_app: ${{ steps.check.outputs.build_app }}
      version: ${{ steps.check.outputs.version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Check commit message
        id: check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          
          if [[ "$COMMIT_MSG" =~ Release[[:space:]]+(Frontend|Backend|App)[[:space:]]+Version[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            
            # Extract version from commit message
            VERSION=$(echo "$COMMIT_MSG" | grep -oP 'Version \K[0-9]+\.[0-9]+\.[0-9]+')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Extracted version: $VERSION"
            
            if [[ "$COMMIT_MSG" =~ Release[[:space:]]+Frontend ]]; then
              echo "build_frontend=true" >> $GITHUB_OUTPUT
            else
              echo "build_frontend=false" >> $GITHUB_OUTPUT
            fi
            
            if [[ "$COMMIT_MSG" =~ Release[[:space:]]+Backend ]]; then
              echo "build_backend=true" >> $GITHUB_OUTPUT
            else
              echo "build_backend=false" >> $GITHUB_OUTPUT
            fi
            
            if [[ "$COMMIT_MSG" =~ Release[[:space:]]+App ]]; then
              echo "build_app=true" >> $GITHUB_OUTPUT
              echo "build_frontend=true" >> $GITHUB_OUTPUT
              echo "build_backend=true" >> $GITHUB_OUTPUT
            else
              echo "build_app=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "build_frontend=false" >> $GITHUB_OUTPUT
            echo "build_backend=false" >> $GITHUB_OUTPUT
            echo "build_app=false" >> $GITHUB_OUTPUT
            echo "version=latest" >> $GITHUB_OUTPUT
          fi

  build-and-push-backend:
    needs: check-commit
    if: needs.check-commit.outputs.build_backend == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./BackendDotNet/FF.Articles.Backend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            firefly26710/ffarticles-backend:latest
            firefly26710/ffarticles-backend:${{ needs.check-commit.outputs.version }}

  deploy-backend-to-server:
    needs: [check-commit, build-and-push-backend]
    if: needs.check-commit.outputs.build_backend == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Install cloudflared
        run: |
          sudo apt update
          sudo apt install -y curl gnupg lsb-release
          curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloudflare-main.gpg
          echo "deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflared.list
          sudo apt update
          sudo apt install -y cloudflared

      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Configure SSH for Cloudflare Tunnel
        run: |
          echo "Host cf-mac-server
            HostName ${{ secrets.SSH_HOST }}
            User ${{ secrets.SSH_USERNAME }}
            ProxyCommand cloudflared access ssh --hostname %h" >> ~/.ssh/config

      - name: Deploy to macOS server over Cloudflare Tunnel
        run: |
          ssh -o StrictHostKeyChecking=no cf-mac-server \
            "cd /Users/liqiangwang/Repo/FireflyArticles/Deploy && export PATH=/usr/local/bin:/opt/homebrew/bin:$PATH && docker compose -f docker-compose.backend.yml up -d"
